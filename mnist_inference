import tensorflow as tf

input_node = 784
output_node = 10
layer1_node = 500


def get_weight_variable(shape,regularizer):

    weights = tf.get_variable('weights',shape,initializer=tf.truncated_normal_initializer(stddev=0.1))

    if regularizer != None:

        #将每一个参数的正则化损失加入到集合，方便之后使用
        tf.add_to_collection('losses',regularizer(weights))

    return weights


def inference(input_tensor,regularize):

    #使用tensorflow的变量管理可以使得每次调用函数时不用传入所有的参数
    with tf.variable_scope('layer1'):

        weights = get_weight_variable([input_node,layer1_node],regularize)
        biases = tf.get_variable('biases',[layer1_node],initializer=tf.constant_initializer(0.0))

        layer1 = tf.nn.relu(tf.matmul(input_tensor,weights) + biases)

    with tf.variable_scope('layer2'):

        weights = get_weight_variable([layer1_node,output_node],regularize)
        biases = tf.get_variable('biases',[output_node],initializer=tf.constant_initializer(0.0))

        layer2 = tf.matmul(layer1,weights) + biases

    return layer2
