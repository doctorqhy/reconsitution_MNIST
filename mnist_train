import tensorflow as tf
import mnist_inference
from tensorflow.examples.tutorials.mnist import input_data
import os


batch_size = 100
learning_rate_base = 0.8
learning_rate_decay = 0.99
regularaztion_rate = 0.0001
moving_avreage_decay = 0.99

model_save_path = 'model'
model_name = 'model.ckpt'


def train(mnist):

    x = tf.placeholder(tf.float32,[None,mnist_inference.input_node],name='x-input')
    y_ = tf.placeholder(tf.float32,[None,mnist_inference.output_node],name='y-input')

    #定义正则化损失
    regularizer = tf.contrib.layers.l2_regularizer(regularaztion_rate)
    #只有训练师要使用正则化损失
    y = mnist_inference.inference(x,regularizer)

    #模拟神经网络训练的轮数
    global_step = tf.Variable(0,trainable=False)

    #定义滑动平均模型
    variable_averages = tf.train.ExponentialMovingAverage(moving_avreage_decay,global_step)
    #使模型应用到所有训练数据
    variable_averages_op = variable_averages.apply(tf.trainable_variables())

    cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=y,labels=y_)
    cross_entropy_mean = tf.reduce_mean(cross_entropy)

    #将交叉熵和所有参数正则化损失的值之和作为优化的目标
    loss = cross_entropy_mean + tf.add_n(tf.get_collection('losses'))

    #定义指数衰减的学习率
    learning_rate = tf.train.exponential_decay(learning_rate_base,global_step,mnist.train.num_examples//batch_size,learning_rate_decay)

    train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,global_step=global_step)

    train_op = tf.group(train_step,variable_averages_op)

    saver = tf.train.Saver()

    with tf.Session() as sess:

        tf.global_variables_initializer().run()
        for i in range(30000):


            xs,ys = mnist.train.next_batch(batch_size)
            _,loss_value,step = sess.run([train_op,loss,global_step],feed_dict={x:xs,y_:ys})

            if i%1000 == 0:
                print('after %d training step,loss on training batch is %g'%(i,loss_value))
                saver.save(sess,os.path.join(model_save_path,model_name),global_step=global_step)

def main(argv = None):

    mnist = input_data.read_data_sets('MNIST_data',one_hot=True)
    train(mnist)

if __name__ == '__main__':
    tf.app.run()
